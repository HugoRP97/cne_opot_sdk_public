# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from opot_sdk.helpers.logging import log_pb2 as opot__sdk_dot_config_dot_logging_dot_log__pb2


class LogReportStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ingressToController = channel.unary_unary(
                '/LogReport/ingressToController',
                request_serializer=opot__sdk_dot_config_dot_logging_dot_log__pb2.IngressLog.SerializeToString,
                response_deserializer=opot__sdk_dot_config_dot_logging_dot_log__pb2.Empty.FromString,
                )
        self.middleToController = channel.unary_unary(
                '/LogReport/middleToController',
                request_serializer=opot__sdk_dot_config_dot_logging_dot_log__pb2.MiddleLog.SerializeToString,
                response_deserializer=opot__sdk_dot_config_dot_logging_dot_log__pb2.Empty.FromString,
                )
        self.egressToController = channel.unary_unary(
                '/LogReport/egressToController',
                request_serializer=opot__sdk_dot_config_dot_logging_dot_log__pb2.EgressLog.SerializeToString,
                response_deserializer=opot__sdk_dot_config_dot_logging_dot_log__pb2.Empty.FromString,
                )


class LogReportServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ingressToController(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def middleToController(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def egressToController(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LogReportServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ingressToController': grpc.unary_unary_rpc_method_handler(
                    servicer.ingressToController,
                    request_deserializer=opot__sdk_dot_config_dot_logging_dot_log__pb2.IngressLog.FromString,
                    response_serializer=opot__sdk_dot_config_dot_logging_dot_log__pb2.Empty.SerializeToString,
            ),
            'middleToController': grpc.unary_unary_rpc_method_handler(
                    servicer.middleToController,
                    request_deserializer=opot__sdk_dot_config_dot_logging_dot_log__pb2.MiddleLog.FromString,
                    response_serializer=opot__sdk_dot_config_dot_logging_dot_log__pb2.Empty.SerializeToString,
            ),
            'egressToController': grpc.unary_unary_rpc_method_handler(
                    servicer.egressToController,
                    request_deserializer=opot__sdk_dot_config_dot_logging_dot_log__pb2.EgressLog.FromString,
                    response_serializer=opot__sdk_dot_config_dot_logging_dot_log__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'LogReport', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LogReport(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ingressToController(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LogReport/ingressToController',
            opot__sdk_dot_config_dot_logging_dot_log__pb2.IngressLog.SerializeToString,
            opot__sdk_dot_config_dot_logging_dot_log__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def middleToController(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LogReport/middleToController',
            opot__sdk_dot_config_dot_logging_dot_log__pb2.MiddleLog.SerializeToString,
            opot__sdk_dot_config_dot_logging_dot_log__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def egressToController(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LogReport/egressToController',
            opot__sdk_dot_config_dot_logging_dot_log__pb2.EgressLog.SerializeToString,
            opot__sdk_dot_config_dot_logging_dot_log__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
